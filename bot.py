import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TELEGRAM_TOKEN, CHAT_ID
from scanner import find_signals, find_news_with_volume_spike
from ai_comment import comment_on

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üî• –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞", callback_data="entry_point")],
    [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ + –û–±—ä–µ–º", callback_data="news_volume")],
    [InlineKeyboardButton("üéÆ –ó–∞–≥–ª—É—à–∫–∞ 1", callback_data="stub_1")],
    [InlineKeyboardButton("üö´ –ó–∞–≥–ª—É—à–∫–∞ 2", callback_data="stub_2")],
])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update, context):
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "entry_point":
        await query.edit_message_text("üîÑ –†–∞—Å—á–µ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞...", reply_markup=main_keyboard)
        await find_signals(context.bot, chat_id=query.message.chat_id)
    elif query.data == "news_volume":
        await query.edit_message_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑–∞...", reply_markup=main_keyboard)
        await find_news_with_volume_spike(context.bot, chat_id=query.message.chat_id)
    elif query.data.startswith("stub"):
        await query.edit_message_text("üö´ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_keyboard)
    elif query.data.startswith("ai_comment"):
        _, symbol, rsi, volume = query.data.split("|")
        ai = comment_on(symbol, float(rsi), float(volume))
        msg = f"üß† AI-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ {symbol}:\n{ai}"
        await context.bot.send_message(chat_id=query.message.chat_id, text=msg)

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
async def scheduled_scanner(bot):
    while True:
        await find_signals(bot)
        await asyncio.sleep(300)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.create_task(scheduled_scanner(app.bot))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ run_forever.py
def run_bot():
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = None

    if loop and loop.is_running():
        print("‚ö†Ô∏è Event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é create_task.")
        loop.create_task(main())
    else:
        asyncio.run(main())
