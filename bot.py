# bot.py
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import TELEGRAM_TOKEN, CHAT_ID
from bybit_api import get_all_spot_symbols, get_klines
from indicators import calculate_rsi
from ai_comment import comment_on
from news import is_news_positive
from chart import save_chart
import time
from datetime import datetime

bot = Bot(token=TELEGRAM_TOKEN)

# üîç –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
async def find_signals():
    symbols = get_all_spot_symbols()
    for symbol in symbols:
        try:
            closes, volumes = get_klines(symbol)
            if len(closes) < 20:
                continue

            rsi = calculate_rsi(closes)[-1]
            volume_now = volumes[-1]
            volume_avg = sum(volumes[-10:]) / 10

            rsi_signal = rsi > 70 or rsi < 30
            volume_signal = volume_now > volume_avg * 2

            if (rsi_signal or volume_signal) and is_news_positive(symbol):
                direction = "üîº –õ–û–ù–ì" if rsi < 30 else "üîΩ –®–û–†–¢"
                target_price = closes[-1] * (1.03 if rsi < 30 else 0.97)
                link = f"https://www.bybit.com/trade/usdt/{symbol.replace('USDT', '')}USDT"

                msg = (
                    f"üìà –°–∏–≥–Ω–∞–ª –ø–æ <b>{symbol}</b>\n"
                    f"RSI: {rsi:.2f}\n"
                    f"–û–±—ä—ë–º: {volume_now:.2f}\n"
                    f"{direction}\n"
                    f"üéØ –¶–µ–ª—å: {target_price:.4f}\n"
                    f"üîó <a href=\"{link}\">–¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö</a>"
                )

                ai = comment_on(symbol, rsi, volume_now)
                if ai:
                    msg += f"\nü§ñ AI: {ai}"

                chart_path = save_chart(symbol, closes)
                await bot.send_photo(chat_id=CHAT_ID, photo=open(chart_path, "rb"), caption=msg, parse_mode="HTML")
                await asyncio.sleep(1)

        except Exception as e:
            print(f"[ERROR] {symbol}: {e}")

# üì≤ –ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞–π—Ç–∏ —Å–∏–≥–Ω–∞–ª —Å–µ–π—á–∞—Å", callback_data="find_signal")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "find_signal":
        await query.edit_message_text("–ò—â—É —Å–∏–≥–Ω–∞–ª—ã...")
        await find_signals()

# üïí –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
async def scheduled_scanner():
    while True:
        print(f"üïí –ê–≤—Ç–æ–ø–æ–∏—Å–∫ {datetime.now().strftime('%H:%M:%S')}")
        await find_signals()
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    app.create_task(scheduled_scanner())

    print("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
