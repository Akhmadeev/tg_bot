import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from config import TELEGRAM_TOKEN, CHAT_ID
from scanner import find_signals, find_news_with_volume_spike
from ai_comment import comment_on
from bybit_api import get_current_price_and_trend

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞", callback_data="entry_point")],
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ + –û–±—ä–µ–º", callback_data="news_volume")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üîç –ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã", callback_data="check_price")],
        [InlineKeyboardButton("üö´ –ó–∞–≥–ª—É—à–∫–∞", callback_data="stub_2")],
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update, context):
    keyboard = get_main_keyboard()
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    elif update.callback_query:
        await update.callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "entry_point":
        await query.edit_message_text("üîÑ –†–∞—Å—á–µ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞...", reply_markup=get_main_keyboard())
        await find_signals(context.bot, chat_id=query.message.chat_id)
    elif query.data == "news_volume":
        await query.edit_message_text("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑–∞...", reply_markup=get_main_keyboard())
        await find_news_with_volume_spike(context.bot, chat_id=query.message.chat_id)
    elif query.data == "check_price":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ton):")
        context.user_data["awaiting_symbol"] = True
    elif query.data.startswith("stub"):
        await query.edit_message_text("üö´ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_main_keyboard())
    elif query.data.startswith("ai_comment"):
        _, symbol, rsi, volume = query.data.split("|")
        ai = comment_on(symbol, float(rsi), float(volume))
        msg = f"üíÆ AI-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ {symbol}:\n{ai}"
        await context.bot.send_message(chat_id=query.message.chat_id, text=msg, reply_markup=get_main_keyboard())
    elif query.data == "start":
        await start(update, context)
    elif query.data == "stats":
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏:\n(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def message_handler(update, context):
    if context.user_data.get("awaiting_symbol"):
        symbol = update.message.text.strip().upper()
        context.user_data["awaiting_symbol"] = False

        try:
            price, trend = get_current_price_and_trend(symbol)
            link = f"https://www.bybit.com/trade/usdt/{symbol}"
            msg = f"üí± {symbol} —Å–µ–π—á–∞—Å: ${price:.4f}\nüìà –¢—Ä–µ–Ω–¥: {trend}\nüîó [–§—å—é—á–µ—Ä—Å—ã –Ω–∞ Bybit]({link})"
        except Exception as e:
            msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ {symbol}: {e}"

        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=get_main_keyboard())

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
async def scheduled_scanner(bot):
    while True:
        await find_signals(bot)
        await asyncio.sleep(300)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if CHAT_ID != "your_chat_id_here":
        try:
            await app.bot.send_message(chat_id=CHAT_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é: {e}")

    async def post_init():
        app.create_task(scheduled_scanner(app.bot))

    await app.initialize()
    await app.start()
    await post_init()
    await app.updater.start_polling()
    await app.updater.idle()

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ run_forever.py
def run_bot():
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is already running" in str(e):
            print("‚ö†Ô∏è Event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫...")
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            loop.run_forever()
        else:
            raise
